#!/usr/bin/env ruby
this_file = File.symlink?(__FILE__) ? File.expand_path(File.readlink(__FILE__), File.dirname(__FILE__)) : __FILE__
$:.unshift File.expand_path('../../lib', this_file)

begin
require 'optparse'
require 'series'

if ARGV.empty?
  ARGV << '-h'
end

driver = nil
format = "%2$s\n"

OptionParser.new do |opts|
  opts.banner = %{
usage: #{File.basename($0)} [options] SERIES [ARGS...]

  Generates a series in the specified format.

options:
}.lstrip
  opts.on("-h", "--help", "print this help") do
    puts opts
    puts
    exit
  end

  opts.on("-l", "--list", "list available series") do
    list = Series.list
    list.keys.sort.each do |name|
      puts name
    end
    exit
  end

  opts.on("-n NUM", "number of values to print") do |input|
    driver = case input
    when "-"
      require "series/drivers/stream"
      Series::Drivers::Stream.new
    when /^\d+$/
      Series.counter(0, input.to_i - 1)
    when /^(-?\d+)..(-?\d+)$/
      x = $1.to_i
      n = $2.to_i
      Series.counter(x, n)
    when /^(-?\d+)...(-?\d+)$/
      x = $1.to_i
      n = $2.to_i - 1
      Series.counter(x, n)
    else
      raise "invalid value for -n: #{input.inspect}"
    end
  end

  opts.on("-x", "print x values") do
    format = "%s %s\n"
  end
end.parse!

if ARGV.empty?
  raise "no series specified"
end
args = ARGV.dup
ARGV.clear

series = Series.init(*args)
driver ||= Series.counter

driver.each do |x|
  y = series[x]
  print format % [x, y]
end

rescue Interrupt
  exit 130
rescue Errno::EPIPE 
  exit 0
rescue
  raise if $DEBUG
  $stderr.puts $!.message
  exit 1
end

