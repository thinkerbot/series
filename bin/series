#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)
begin
  require 'optparse'
  require 'series'
  require 'series/command'
  require 'shellwords'

  options = Series::Command.options(
    :mode => :single,
    :field_sep => " ",
    :line_sep  => "\n",
    :print_step_indexes => false,
    :precision => false,
    :unbuffer => false,
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: series [options] -- SERIES ARGS...

  Generate series data.

options:
}.lstrip

    opts.on("-F", "--field-sep SEP", "field separator (#{options[:field_sep].inspect})") do |value|
      options[:field_sep] = value
    end

    opts.on("-L", "--line-sep SEP", "line separator (#{options[:line_sep].inspect})") do |value|
      options[:line_sep] = value
    end

    opts.on("-l", "--list", "lists available series") do
      options[:mode] = :list
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts Series.version
      exit
    end

    opts.on("-i", "--[no-]step-index", "print step index") do |value|
      options[:print_step_indexes] = value
    end

    opts.on("-M", "--multi-series", "generate multiple series (each arg is a command string)") do
      options[:mode] = :multiple
    end

    opts.on("-m", "--stream", "generate steps indefinitely") do
      options[:n_steps] = nil
    end

    opts.on("-n", "--n-steps NUM", "number of steps in series (#{options[:n_steps]})") do |value|
      options[:n_steps] = value.to_i
    end

    opts.on("-o", "--offset NUM", "step offset (#{options[:offset]})") do |value|
      options[:offset] = value.to_i
    end

    opts.on("-r", "--round NUM", "round to precision") do |value|
      options[:precision] = value.to_i
    end

    opts.on("-s", "--step-size NUM", "the step size (#{options[:step_size]})") do |value|
      options[:step_size] = value.to_i
    end

    opts.on("-u", "--[no-]unbuffer", "unbuffer output") do |value|
      options[:unbuffer] = value
    end
  end.parse!

  commands = ARGV.dup; ARGV.clear
  mode = options[:mode]

  case mode
  when :list
    path = ENV['PATH'].to_s.split(":").uniq
    prefix = "series-"
    command_files = Dir[*path.map {|dir| File.join(dir, "#{prefix}*") }]
    command_files.map do |command_file|
      File.basename(command_file)[prefix.length, command_file.length - prefix.length]
    end.sort.uniq.each do |command_name|
      puts "  %s" % [command_name]
    end
    exit
  when :single
    commands = [commands] unless commands.empty?
  when :multiple
    commands.map! {|command_str| Shellwords.shellsplit(command_str) }
  end
  exit if commands.empty?

  readers, writers = [], []

  if options[:unbuffer]
    $stdout.sync = true
  end

  field_sep = options[:field_sep]
  line_sep  = options[:line_sep]
  precision = options[:precision]

  index_reader = \
  if options[:print_step_indexes]
    r, w = IO.pipe
    writers << w
    r
  else
    nil
  end
  
  commands.each_with_index do |(command, *args), index|
    args.unshift("series-#{command}")
    io = IO.popen(args, "r+")
    readers << io
    writers << io
  end

  Thread.new do
    driver = Series::Command.driver(options)
    driver.each do |input|
      writers.each do |io|
        io.puts input
      end
    end
    writers.each do |io|
      io.close_write
    end
  end

  loop do
    fields = []
    readers.each do |io|
      if line = io.gets
        line.chomp!("\n")
        fields.concat line.split(',')
      else
        exit
      end
    end

    if precision
      fields.map! {|field| Float(field).round(precision) }
    end

    if index_reader
      index = index_reader.gets
      index.chomp!("\n")
      fields.unshift index
    end

    print fields.join(field_sep)
    print line_sep
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
end
