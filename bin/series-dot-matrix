#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)

begin
  require 'optparse'
  require 'series'
  require 'series/command'

  options = []
  OptionParser.new do |opts|
    opts.banner = %{
usage: series-dot-matrix [options]

  Prints dot-matrix values to draw each input phrase.

options:
}.lstrip

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts Series.version
      exit
    end
  end.parse!

  unless ARGV.empty?
    $stderr.puts "extra arguments"
    exit 1
  end

  # https://www.ccsinfo.com/forum/viewtopic.php?p=34689
  # 5X7 ASCII table
  BINARY_LOCATIONS = {
    0x20 => [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], # Space 
    0x21 => [0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04], # ! 
    0x22 => [0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00], # " 
    0x23 => [0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a], # # 
    0x24 => [0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04], # $ 
    0x25 => [0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13], # % 
    0x26 => [0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d], # & 
    0x27 => [0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00], # ' 
    0x28 => [0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02], # ( 
    0x29 => [0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08], # ) 
    0x2a => [0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04], # * 
    0x2b => [0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00], # + 
    0x2c => [0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08], # , 
    0x2d => [0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00], # - 
    0x2e => [0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c], # . 
    0x2f => [0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10], # / 
    0x30 => [0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e], # 0 
    0x31 => [0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e], # 1 
    0x32 => [0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f], # 2 
    0x33 => [0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e], # 3 
    0x34 => [0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02], # 4 
    0x35 => [0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e], # 5 
    0x36 => [0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e], # 6 
    0x37 => [0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08], # 7 
    0x38 => [0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e], # 8 
    0x39 => [0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c], # 9 
    0x3a => [0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00], # : 
    0x3b => [0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08], # ; 
    0x3c => [0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02], # < 
    0x3d => [0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00], # = 
    0x3e => [0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08], # > 
    0x3f => [0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04], # ? 
    0x40 => [0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f], # @ 
    0x41 => [0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11], # A 
    0x42 => [0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e], # B 
    0x43 => [0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e], # C 
    0x44 => [0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e], # D 
    0x45 => [0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f], # E 
    0x46 => [0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10], # F 
    0x47 => [0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f], # G 
    0x48 => [0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11], # H 
    0x49 => [0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e], # I 
    0x4a => [0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c], # J 
    0x4b => [0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11], # K 
    0x4c => [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f], # L 
    0x4d => [0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11], # M 
    0x4e => [0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11], # N 
    0x4f => [0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e], # O 
    0x50 => [0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10], # P 
    0x51 => [0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d], # Q 
    0x52 => [0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11], # R 
    0x53 => [0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e], # S 
    0x54 => [0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04], # T 
    0x55 => [0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e], # U 
    0x56 => [0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04], # V 
    0x57 => [0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11], # W 
    0x58 => [0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11], # X 
    0x59 => [0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04], # Y 
    0x5a => [0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f], # Z 
    0x5b => [0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e], # [ 
    0x5c => [0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01], # \ 
    0x5d => [0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e], # ] 
    0x5e => [0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00], # ^ 
    0x5f => [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f], # _ 
    0x60 => [0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00], # ` 
    0x61 => [0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d], # a 
    0x62 => [0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c], # b 
    0x63 => [0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e], # c 
    0x64 => [0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07], # d 
    0x65 => [0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f], # e 
    0x66 => [0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08], # f 
    0x67 => [0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e], # g 
    0x68 => [0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11], # h 
    0x69 => [0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e], # i 
    0x6a => [0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c], # j 
    0x6b => [0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12], # k 
    0x6c => [0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04], # l 
    0x6d => [0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11], # m 
    0x6e => [0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11], # n 
    0x6f => [0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e], # o 
    0x70 => [0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10], # p 
    0x71 => [0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01], # q 
    0x72 => [0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10], # r 
    0x73 => [0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e], # s 
    0x74 => [0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06], # t 
    0x75 => [0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d], # u 
    0x76 => [0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04], # v 
    0x77 => [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a], # w 
    0x78 => [0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11], # x 
    0x79 => [0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e], # y 
    0x7a => [0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f], # z 
    0x7b => [0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06], # [ 
    0x7c => [0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04], # | 
    0x7d => [0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c], # } 
    0x7e => [0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00], # ~ 
    0x7f => [0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f], # DEL 
  }

  dot_matrix_width = 5
  dot_matrix_height = 7
  character_spacing = 1
  line_spacing = 2

  MATRIX_LOCATIONS = {}
  BINARY_LOCATIONS.each do |ord, binary_locations|
    locations = []
    binary_locations.each_with_index do |binary, y|
      binary.to_s(2).rjust(dot_matrix_width, "0").chars.each_with_index do |value, x|
        locations << (y * dot_matrix_width) + x if value == '1'
      end
    end
    MATRIX_LOCATIONS[ord] = locations
  end

  STEP_OFFSETS = {}
  dot_matrix_width.times do |x|
    dot_matrix_height.times do |y|
      pos = (dot_matrix_width * y) + x
      STEP_OFFSETS[pos] = [y, x]
    end
  end

  # http://gis.stackexchange.com/a/2980
  def offset(curr_lat, curr_lng, steps_north, steps_east, scale_in_meters = 100.0)
    earth_radius = 6378137

    delta_lat = steps_north * scale_in_meters /earth_radius
    delta_lng = steps_east * scale_in_meters /(earth_radius * Math.cos(Math::PI * curr_lat / 180))

    lat = curr_lat + delta_lat * 180/Math::PI
    lng = curr_lng + delta_lng * 180/Math::PI

    [lat, lng]
  end

  orig_lat = curr_lat = 0.0
  orig_lng = curr_lng = 0.0
  while line = $stdin.gets
    line.strip.each_char do |x|
      matrix_positions = MATRIX_LOCATIONS[x.ord]

      if matrix_positions.nil?
        $stderr.puts "warn: cannot render #{x.inspect} (skipping)"
        next
      end

      matrix_positions.each do |pos|
        steps_north, steps_east = STEP_OFFSETS[pos]
        lat, lng = offset(curr_lat, curr_lng, steps_north, steps_east)
        $stdout.puts "#{lat} #{lng}"
      end

      curr_lat, curr_lng = offset(curr_lat, curr_lng, 0, dot_matrix_width + character_spacing)
    end

    curr_lat, curr_lng = offset(curr_lat, orig_lng, dot_matrix_height + line_spacing, 0)
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
end
